"""initial migration

Revision ID: 4e8a366d8cae
Revises:
Create Date: 2025-06-04 21:04:21.441388

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from geoalchemy2 import Geometry

# revision identifiers, used by Alembic.
revision: str = "4e8a366d8cae"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def seed() -> None:
    op.execute("INSERT INTO countries(country_id, iso3) values (21, 'AUS')")


def upgrade() -> None:
    # Enable postgis
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "countries",
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.Column("iso3", sa.CHAR(length=3), nullable=False),
        sa.PrimaryKeyConstraint("country_id"),
        sa.UniqueConstraint("iso3"),
    )
    op.create_table(
        "brands",
        sa.Column("brand_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.VARCHAR(length=30), nullable=False),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["countries.country_id"],
        ),
        sa.PrimaryKeyConstraint("brand_id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "fuels",
        sa.Column("fuel_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), nullable=False),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["countries.country_id"],
        ),
        sa.PrimaryKeyConstraint("fuel_id"),
    )
    op.create_table(
        "regions",
        sa.Column("region_level_id", sa.Integer(), nullable=False),
        sa.Column("region_id", sa.Integer(), nullable=False),
        sa.Column("region_parent_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.VARCHAR(length=30), nullable=False),
        sa.Column("abbrev", sa.CHAR(length=30), nullable=False),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["countries.country_id"],
        ),
        sa.PrimaryKeyConstraint("region_level_id", "region_id"),
    )
    op.create_geospatial_table(
        "sites",
        sa.Column("site_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), nullable=False),
        sa.Column("address", sa.VARCHAR(length=50), nullable=False),
        sa.Column("postcode", sa.VARCHAR(length=16), nullable=False),
        sa.Column("g1", sa.Integer(), nullable=False),
        sa.Column("g2", sa.Integer(), nullable=False),
        sa.Column("g3", sa.Integer(), nullable=False),
        sa.Column("g4", sa.Integer(), nullable=False),
        sa.Column("g5", sa.Integer(), nullable=False),
        sa.Column(
            "geo_location",
            Geometry(
                geometry_type="POINT",
                srid=4326,
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("last_modified", sa.DateTime(), nullable=True),
        sa.Column("google_place_id", sa.VARCHAR(length=40), nullable=False),
        sa.Column("brand_id", sa.Integer(), nullable=False),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["brand_id"],
            ["brands.brand_id"],
        ),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["countries.country_id"],
        ),
        sa.PrimaryKeyConstraint("site_id"),
        sa.UniqueConstraint("google_place_id"),
    )
    op.create_geospatial_index(
        "idx_sites_geo_location",
        "sites",
        ["geo_location"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_table(
        "prices",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("site_id", sa.Integer(), nullable=False),
        sa.Column("fuel_id", sa.Integer(), nullable=False),
        sa.Column("collection_method", sa.CHAR(), nullable=False),
        sa.Column("transaction_date_utc", sa.DateTime(), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["countries.country_id"],
        ),
        sa.ForeignKeyConstraint(
            ["fuel_id"],
            ["fuels.fuel_id"],
        ),
        sa.ForeignKeyConstraint(
            ["site_id"],
            ["sites.site_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_prices_transaction_date_utc"),
        "prices",
        ["transaction_date_utc"],
        unique=False,
    )
    # ### end Alembic commands ###

    seed()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_prices_transaction_date_utc"), table_name="prices")
    op.drop_table("prices")
    op.drop_geospatial_index(
        "idx_sites_geo_location",
        table_name="sites",
        postgresql_using="gist",
        column_name="geo_location",
    )
    op.drop_geospatial_table("sites")
    op.drop_table("regions")
    op.drop_table("fuels")
    op.drop_table("brands")
    op.drop_table("countries")
    # ### end Alembic commands ###
